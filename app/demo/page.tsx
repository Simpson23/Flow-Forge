"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Textarea } from "@/components/ui/textarea"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Loader2, Download, Eye, Copy, Sparkles, AlertCircle } from "lucide-react"
import { useToast } from "@/hooks/use-toast"
import { WorkflowPreview } from "@/components/workflow-preview"

interface GeneratedWorkflow {
  n8nJson: any
  mermaidDiagram: string
  prompt: string
}

export default function DemoPage() {
  const [prompt, setPrompt] = useState("")
  const [isGenerating, setIsGenerating] = useState(false)
  const [generatedWorkflow, setGeneratedWorkflow] = useState<GeneratedWorkflow | null>(null)
  const [showPreview, setShowPreview] = useState(false)
  const { toast } = useToast()

  const handleGenerate = async () => {
    if (!prompt.trim()) {
      toast({
        title: "Error",
        description: "Please enter a workflow description",
        variant: "destructive",
      })
      return
    }

    setIsGenerating(true)

    // Simulate API call with demo data
    setTimeout(() => {
      const demoWorkflow = {
        n8nJson: {
          name: "Demo Workflow",
          nodes: [
            {
              parameters: {},
              id: "1",
              name: "Start",
              type: "n8n-nodes-base.start",
              typeVersion: 1,
              position: [240, 300],
            },
            {
              parameters: {
                subject: "Demo Email Processing",
                message: "This is a demo workflow generated by FlowForge AI",
              },
              id: "2",
              name: "Send Email",
              type: "n8n-nodes-base.emailSend",
              typeVersion: 1,
              position: [460, 300],
            },
          ],
          connections: {
            Start: {
              main: [
                [
                  {
                    node: "Send Email",
                    type: "main",
                    index: 0,
                  },
                ],
              ],
            },
          },
        },
        mermaidDiagram: `graph TD
    A[Start] --> B[Send Email]
    B --> C[End]`,
        prompt: prompt,
      }

      setGeneratedWorkflow(demoWorkflow)
      setShowPreview(true)
      setIsGenerating(false)

      toast({
        title: "Demo Workflow Generated",
        description: "This is a sample workflow. Sign up for full AI generation!",
      })
    }, 2000)
  }

  const handleDownload = () => {
    if (!generatedWorkflow) return

    const blob = new Blob([JSON.stringify(generatedWorkflow.n8nJson, null, 2)], {
      type: "application/json",
    })
    const url = URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = `demo-workflow-${Date.now()}.json`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)

    toast({
      title: "Downloaded",
      description: "Demo workflow JSON downloaded successfully",
    })
  }

  const handleCopy = async () => {
    if (!generatedWorkflow) return

    try {
      await navigator.clipboard.writeText(JSON.stringify(generatedWorkflow.n8nJson, null, 2))
      toast({
        title: "Copied",
        description: "Demo workflow JSON copied to clipboard",
      })
    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to copy to clipboard",
        variant: "destructive",
      })
    }
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="max-w-4xl mx-auto">
        <div className="mb-8">
          <div className="flex items-center gap-2 mb-4">
            <h1 className="text-3xl font-bold text-slate-900 dark:text-white">FlowForge AI Demo</h1>
            <Badge variant="secondary">Demo Mode</Badge>
          </div>
          <div className="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4 mb-6">
            <div className="flex items-start gap-3">
              <AlertCircle className="h-5 w-5 text-blue-600 dark:text-blue-400 mt-0.5 flex-shrink-0" />
              <div>
                <p className="text-blue-800 dark:text-blue-200 font-medium mb-1">Demo Mode Active</p>
                <p className="text-blue-700 dark:text-blue-300 text-sm">
                  This demo generates sample workflows. Sign up for AI-powered workflow generation with OpenAI
                  integration.
                </p>
              </div>
            </div>
          </div>
          <p className="text-slate-600 dark:text-slate-400">
            Try describing an automation workflow to see how FlowForge AI works.
          </p>
        </div>

        <div className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Sparkles className="h-5 w-5 text-blue-600" />
                Generate Workflow (Demo)
              </CardTitle>
              <CardDescription>
                Describe your automation workflow in plain English. This demo will show you a sample workflow.
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <Textarea
                placeholder="Example: Create a workflow that monitors my Gmail for new emails with 'invoice' in the subject, extracts the attachment, and saves it to Google Drive in a folder called 'Invoices'"
                value={prompt}
                onChange={(e) => setPrompt(e.target.value)}
                rows={4}
                className="resize-none"
              />

              <Button onClick={handleGenerate} disabled={isGenerating || !prompt.trim()} className="w-full">
                {isGenerating ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    Generating Demo Workflow...
                  </>
                ) : (
                  <>
                    <Sparkles className="mr-2 h-4 w-4" />
                    Generate Demo Workflow
                  </>
                )}
              </Button>
            </CardContent>
          </Card>

          {generatedWorkflow && (
            <Card>
              <CardHeader>
                <div className="flex items-center justify-between">
                  <div>
                    <CardTitle>Generated Demo Workflow</CardTitle>
                    <CardDescription>Sample n8n workflow for demonstration</CardDescription>
                  </div>
                  <Badge variant="secondary">Demo</Badge>
                </div>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="flex flex-wrap gap-2">
                  <Button onClick={handleDownload} variant="outline" size="sm">
                    <Download className="mr-2 h-4 w-4" />
                    Download JSON
                  </Button>
                  <Button onClick={handleCopy} variant="outline" size="sm">
                    <Copy className="mr-2 h-4 w-4" />
                    Copy JSON
                  </Button>
                  <Button onClick={() => setShowPreview(!showPreview)} variant="outline" size="sm">
                    <Eye className="mr-2 h-4 w-4" />
                    {showPreview ? "Hide" : "Show"} Preview
                  </Button>
                </div>

                {showPreview && (
                  <WorkflowPreview
                    mermaidDiagram={generatedWorkflow.mermaidDiagram}
                    n8nJson={generatedWorkflow.n8nJson}
                  />
                )}
              </CardContent>
            </Card>
          )}

          <Card className="border-yellow-200 dark:border-yellow-800 bg-yellow-50 dark:bg-yellow-900/20">
            <CardHeader>
              <CardTitle className="text-yellow-800 dark:text-yellow-200">Ready for the full experience?</CardTitle>
              <CardDescription className="text-yellow-700 dark:text-yellow-300">
                Sign up to get AI-powered workflow generation with unlimited possibilities.
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="flex gap-3">
                <Button className="bg-blue-600 hover:bg-blue-700">Get Started Free</Button>
                <Button variant="outline">View Pricing</Button>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  )
}
